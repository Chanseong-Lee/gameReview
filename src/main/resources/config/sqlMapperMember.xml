<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberDAO">

	<!-- dto는 join된 컬럼인 authlevel있으므로 select는 항상 join해서 사용할것 -->
	<select id="selectAll" resultType="memberDTO">
		select m.m_num, m.m_email, m.m_password, m.m_name, m.m_nickname, m.m_regdate, m.m_isvalid, m.m_point, at.auth_level
		from member m, auth at
		where m.auth_num=at.auth_num order by m.m_num desc
	</select>
	
	<select id="countAll" resultType="Integer">
		select nvl(count(*), 0) 
		from "MEMBER"
	</select>
	
	<select id="selectBySeq" parameterType="Long" resultType="memberDTO">
		select m.m_num, m.m_email, m.m_password, m.m_name, m.m_nickname, m.m_regdate, m.m_isvalid, m.m_point, at.auth_level
		from member m, auth at
		where m.m_num=#{mNum} and m.auth_num=at.auth_num order by m.m_num desc
	</select>
	
	<select id="selectByEmail" parameterType="String" resultType="memberDTO">
		select m.m_num, m.m_email, m.m_password, m.m_name, m.m_nickname, m.m_regdate, m.m_isvalid, m.m_point, at.auth_level
		from member m, auth at
		where m.m_email=#{mEamil} and m.auth_num=at.auth_num order by m.m_num desc
	</select>
	
	<select id="searchByEmail" parameterType="String" resultType="memberDTO">
		select m.m_num, m.m_email, m.m_password, m.m_name, m.m_nickname, m.m_regdate, m.m_isvalid, m.m_point, at.auth_level
		from member m, auth at
		where m.m_email like '%'||#{mEmail}||'%' and m.auth_num=at.auth_num order by m.m_num desc
	</select>
	
	<select id="searchByNickname" parameterType="String" resultType="memberDTO">
		select m.m_num, m.m_email, m.m_password, m.m_name, m.m_nickname, m.m_regdate, m.m_isvalid, m.m_point, at.auth_level
		from member m, auth at
		where m.m_nickname like '%'||#{mNickname}||'%' and m.auth_num=at.auth_num order by m.m_num desc
	</select>
	
	<select id="searchByName" parameterType="String" resultType="memberDTO">
		select m.m_num, m.m_email, m.m_password, m.m_name, m.m_nickname, m.m_regdate, m.m_isvalid, m.m_point, at.auth_level
		from member m, auth at
		where m.m_name like '%'||#{mName}||'%' and m.auth_num=at.auth_num order by m.m_num desc
	</select>
	
	<select id="selectByEmailAndName" parameterType="hashmap" resultType="memberDTO">
		select m.m_num, m.m_email, m.m_password, m.m_name, m.m_nickname, m.m_regdate, m.m_isvalid, m.m_point, at.auth_level
		from member m, auth at
		where m.m_email=#{email} and m.m_name=#{name} and m.auth_num=at.auth_num order by m.m_num desc
	</select>
	
	<select id="countByEmailAndName" parameterType="hashmap" resultType="Integer">
		select nvl(count(*), 0 ) 
		from "MEMBER"
		where "M_EMAIL"=#{email} and "M_NAME"=#{name}
	</select>
	
	<!-- ajax용 -->
	<select id="countByEmail" parameterType="String" resultType="Integer">
		select nvl(count(*), 0)
		from "MEMBER"
		where "M_EMAIL" = #{mEmail}
	</select>
	
	<!-- ajax용 -->
	<select id="countByNickname" parameterType="String" resultType="Integer">
		select nvl(count(*), 0)
		from "MEMBER"
		where "M_NICKNAME" = #{mNickname}
	</select>
	
	<select id="selectByNickname" parameterType="String" resultType="memberDTO">
		select m.m_num, m.m_email, m.m_password, m.m_name, m.m_nickname, m.m_regdate, m.m_isvalid, m.m_point, at.auth_level
		from member m, auth at
		where m.m_nickname=#{mNickname} and m.auth_num=at.auth_num order by m.m_num desc
	</select>
	
	<!-- 회원가입 직후는 권한 레벨 1 -->
	<insert id="insert" parameterType="memberDTO">
		insert into "MEMBER"("M_NUM", "M_EMAIL", "M_PASSWORD", "M_NAME", "M_NICKNAME","M_ISVALID", "AUTH_NUM")
		values("MEMBER_SEQ".nextval, #{mEmail}, #{mPassword}, #{mName}, #{mName}, #{mIsvalid}, (select "AUTH_NUM" from "AUTH" where "AUTH_LEVEL"=1))
		<selectKey keyProperty="mNum" resultType="Long">
			select nvl(max(M_NUM), 0) from "MEMBER"
		</selectKey>
	</insert>
	
	<!-- 회원가입시 디폴트 프로필사진 세팅 -->
	<insert id="insertDefaultProfileImg" parameterType="String">
		insert into "PROFILE_IMG"("PROFILE_NUM", "M_NUM") 
		values("PROFILE_IMG_SEQ".nextval, (select "M_NUM" from "MEMBER" where "M_EMAIL" = #{mEmail}));
	</insert>
	
	<!-- 이메일 인증키 비교해서 count가 1이상이면 인증 성공하도록 -->
	<select id="countByValidKey" parameterType="String" resultType="Integer">
		select count(*) from "MEMBER"
		where "M_ISVALID"=#{validKey}
	</select>
	
	<!-- 받은 이메일에서 인증 누르면 실행 인증여부는 Y로, 권한레벨은 2로 업데이트  -->
	<update id="updateValidKey" parameterType="hashmap">
		update "MEMBER" 
		set "M_ISVALID" = #{validKey}, "AUTH_NUM"=(select "AUTH_NUM" from "AUTH" where "AUTH_LEVEL"=2)
		where "M_EMAIL"=#{email}
	</update>

	<update id ="updateProfile" parameterType="memberDTO">
		update "MEMBER" 
		set "M_NICKNAME"=#{mNickname} 
		where "M_NUM"=#{mNum}
	</update>
	
	<update id="updateProfileByAdmin" parameterType="memberDTO">
		update "MEMBER"
		set "M_NAME"=#{mName}, "M_NICKNAME"=#{mNickname}, "M_POINT"=#{mPoint}
		where "M_NUM"=#{mNum}
	</update>
	
	<update id="updateProfileImg" parameterType="profileImgDTO">
		update "PROFILE_IMG"
		set "PROFILE_IMGNAME"=#{profileImgname}
		where "M_NUM"=#{mNum}
	</update>
	
	<select id="selectProfileImg" parameterType="Long" resultType="profileImgDTO">
		select * 
		from "PROFILE_IMG" 
		where "M_NUM"=#{mNum}
	</select>
	
	<update id="updateTempPassword" parameterType="memberDTO">
		update "MEMBER"
		set "M_PASSWORD"=#{mPassword}
		where "M_EMAIL"=#{mEmail}
	</update>
	
	<update id="updatePassword" parameterType="memberDTO">
		update "MEMBER"
		set "M_PASSWORD"=#{mPassword}
		where "M_EMAIL"=#{mEmail}
	</update>
	
	<delete id="delete" parameterType="Long">
		delete from "MEMBER" 
		where "M_NUM" = #{mNum}
	</delete>
</mapper>
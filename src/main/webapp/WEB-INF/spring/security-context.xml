<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- 나중에 role_user용 유알엘도 추가해야됨 -->
	<!-- spring security 4.x버전부터 csrf필터가 자동활성화되므로 토큰을 첨부하던가 ssl사용안하면 disabled속성 true해줘야함 -->
	<security:http pattern="/**/*.js" security="none"/>
	<security:http pattern="/**/*.css" security="none"/>
	<security:http pattern="/images/**" security="none"/>
	<security:http pattern="/resources/**" security="none"/>
	<!-- auto-config:필터관련 디폴트 자동생성, use-expressions: 권한 표현식사용, once-per-request: 포워딩되었을때도 필터를  거칠지(false해야 forwarding때 문제없다) -->
	<security:http auto-config="true" use-expressions="true" once-per-request="false">
		<security:anonymous enabled="true"/>
		<security:csrf disabled="true"/>
		<security:intercept-url pattern="/member/loginForm" access="permitAll" />
		<security:intercept-url pattern="/member/logoutSuccess" access="permitAll" />
		<security:intercept-url pattern="/member/logout" access="hasAnyRole('ROLE_USER, ROLE_ADMIN')" />
		<security:intercept-url pattern="/member/update/**" access="hasAnyRole('ROLE_USER, ROLE_ADMIN')" />
		<security:intercept-url pattern="/member/delete" access="hasAnyRole('ROLE_USER, ROLE_ADMIN')" />
		
		<security:intercept-url pattern="/member/**" access="permitAll" />
		<security:intercept-url pattern="/admin/**"	access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/**" access="permitAll" />
		<security:access-denied-handler ref="loginAccessDeniedHandler"/>
		<!-- default-target-url="/member/loginSuccess" -->
		<security:form-login 
			username-parameter="email"
			password-parameter="password"
			login-page="/member/loginForm"
			login-processing-url="/member/login"
			authentication-failure-handler-ref="loginFailureHandler"
			authentication-success-handler-ref="loginSuccessHandler"
		/>
		<security:logout
			logout-url="/member/logout"
			logout-success-url="/game/main"
			invalidate-session="false"
			delete-cookies="JSESSIONID,SPRING_SECURITY_REMEMBER_ME_COOKIE"
		/><!-- invalidate-session값이 true면 로그아웃요청후 세션이 없어지기때문에 세션 관리의 invalid-session-url이 호출되어버림 -->
		<security:remember-me key="hsweb" token-validity-seconds="604800" authentication-success-handler-ref="loginSuccessHandler"/>
		<security:session-management invalid-session-url="/member/loginForm"><!-- invalid-session-url : 세션끊겼을때 이동할 페이지 -->
			<security:concurrency-control 
				max-sessions="1" 
				expired-url="/member/loginForm" 
				error-if-maximum-exceeded="false" 
			/><!-- 최대허용가능 중복세션, 중복로그인일어났을때 이동할 페이지(두번째 사용자가 로그인해서 첫번째 끊겼을때 이동되는 페이지), 
				중복로그인 세션 막는 옵션(true : 첫번째 사용자 로그인 후 두번째 사용자 로그인시도하면 두번째는 실패/ false : 두번째 사용자가 로그인하면 첫번째 세션 끊김) -->
		</security:session-management>
		
	</security:http>
	<!-- input 태그의 name(계정) 속성 값, input 태그의 비밀번호 name 속성 값 -->
	<!-- login-page : 로그인 화면 url / ogin-processing-url form : 태그의 action 속성 (default : /login) -->
	<!-- default-target-url : 로그인 성공시 url -->
	<!-- authentication-failure-url : 로그인 실패시 url (default: /login?error=1) -->
	<!-- authentication-success-handler-ref : 로그인 성공시 default-target-url이 아닌	핸들러로 리다이렉트 -->
	<!-- authentication-failure-handler-ref : 로그인 실패시 authentication-failure-url이 아닌 핸들러로 리다이렉트 -->
	<!-- always-use-default-target : 무조건 핸들러가 지정한 페이지로 이동 (default: false) -->

	<!-- logout-url : 로그아웃 URL -->
	<!-- logout-success-url : 로그아웃 성공시, 이동할 URL. (default: /login?logout) -->
	<!-- invalidate-session : 로그아웃 시, session을 무효화할 지 선택. (default: true) -->
	<!-- delete-cookies : 로그아웃 성공시, 삭제할 쿠키 이름 지정 -->
	<!-- success-handler-ref : 로그아웃 성공시, logout-success-url 이 아닌 핸들러로 리다이렉트 -->

	<security:authentication-manager alias="authenticationManager" erase-credentials="false" >
		<security:authentication-provider user-service-ref="loginUserDetailsService">
			<security:password-encoder ref="encoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
	<!-- 핸들러 빈 추가 -->
	<bean id="loginUserDetailsService" class="com.game.review.member.service.LoginUserDetailsService"/>
	<bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<bean id="loginAccessDeniedHandler" class="com.game.review.member.security.LoginAccessDeniedHandler"/>
	<!-- login 실패시 loginForm으로 forwarding -->
	<bean id="loginFailureHandler" class="com.game.review.member.security.LoginFailureHandler"/>
	
	<!-- login 성공시 작동 admin이면 관리자 페이지, 일반유저면 로그인성공페이지로 Redirect -->
	<bean id="loginSuccessHandler" class="com.game.review.member.security.LoginSuccessHandler"/>
	<context:annotation-config/>
	<context:component-scan base-package="com.game.review"/>
</beans>
